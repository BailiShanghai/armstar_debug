/*
 * Copyright (C), 2018-2021, Arm Technology (China) Co., Ltd.
 * All rights reserved
 *
 * The content of this file or document is CONFIDENTIAL and PROPRIETARY
 * to Arm Technology (China) Co., Ltd. It is subject to the terms of a
 * License Agreement between Licensee and Arm Technology (China) Co., Ltd
 * restricting among other things, the use, reproduction, distribution
 * and transfer.  Each of the embodiments, including this information and,,
 * any derivative work shall retain this copyright notice.
 */

#ifndef _TEST_DATA_SM2DSA_H_
#define _TEST_DATA_SM2DSA_H_

/*
 * The SM2DSA test data is generated by GmSSL tool. More information about
 * GmSSL please see http://gmssl.org/
 *
 * And The following steps show how to generate test data:
 *
 * 1. Generate one sm2 keypair.
 *      gmssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:sm2p256v1 -out sm2key.pem
 *    This command will generate one SM2 keypair and save to sm2key.pem file.
 *
 * 2. Dump keypair:
 *      gmssl sm2 -in sm2key.pem -noout -text -param_enc explicit
 *    Note: the public key follows SEC1 2.3.3 format: 0x04 || X || Y
 *
 * 3. Generate some message data. Here is fixed string as message data:
 *      echo "message123" > message.bin
 *
 * 4. Generate hash.
 *      openssl dgst -sha256 -binary -out hash.bin message.bin
 *    This command will generate the SHA256 of message.bin and output to
 *    file hash.bin.
 *    If want to use SHA1, replace "-sha256" with "-sha1".

 * for verify example:
 * 5. Generate sign.
 *      gmssl sm2utl -sign -in hash.bin -out sign.bin -inkey sm2key.pem -id 123
 *    This command will sign the hash data file hash.bin with key
 *    sm2key.pem and ID string: "123", and output to file sign.bin.
 *
 * 6. Dump raw signature:
 *      gmssl asn1parse -in ./sign.bin -inform DER -dump
 *    Note: the signature r and s printed in hex string format.
 *
 * 7. Dump signature in asn1:
 *      hexdump -C sign.bin
 */

static const unsigned char message_sm3[] = {
    0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x32, 0x33, 0x0a
};

static char *sm2_id = "123";
static size_t sm2_id_size = 3;

static const unsigned char sm2_d[32] = {
    0x70, 0xda, 0x5f, 0xd6, 0xda, 0x5c, 0x3a, 0x41, 0x40, 0xee, 0x2a, 0x48, 0x23, 0x43, 0x3d, 0x73,
    0x89, 0x47, 0x8e, 0xcc, 0x1b, 0x93, 0xf8, 0xfb, 0x98, 0x24, 0xc2, 0x4f, 0x23, 0x59, 0x1b, 0xf5
};

static const unsigned char sm2_qx[32] = {
    0xaf, 0xba, 0xa2, 0xba, 0xe8, 0x53, 0x7a, 0x17, 0x8f, 0x1f, 0x18, 0x49, 0xbb, 0xc7, 0xbf, 0xdf,
    0x5b, 0x55, 0x49, 0x19, 0x78, 0x5c, 0x86, 0xc9, 0xcd, 0x33, 0x53, 0x48, 0xb0, 0x6b, 0xaf, 0xf2
};

static const unsigned char sm2_qy[32] = {
    0x44, 0x19, 0x38, 0xbc, 0xee, 0xcb, 0xb8, 0x4b, 0x0b, 0x35, 0x8e, 0x59, 0x7f, 0xba, 0xa0, 0x1b,
    0xec, 0x6b, 0x56, 0x7d, 0x48, 0xc4, 0x78, 0x3c, 0x18, 0x97, 0x88, 0x69, 0x9b, 0xe8, 0x14, 0x7f
};

static const unsigned char signature_r[32] = {
    0x79, 0xD6, 0x39, 0xF4, 0x8E, 0x79, 0x25, 0xFE, 0xD0, 0x7B, 0xEA, 0x63, 0xDF, 0x6F, 0x80, 0xCC,
    0x61, 0x19, 0xF4, 0xC0, 0xB9, 0x14, 0x0F, 0x02, 0x87, 0x91, 0x6F, 0x34, 0xF3, 0xD7, 0x5C, 0xB8
};

static const unsigned char signature_s[32] = {
    0xCE, 0x79, 0x93, 0x3F, 0xF4, 0x7B, 0x82, 0xEA, 0xA0, 0x5A, 0xD3, 0xA2, 0x87, 0xC7, 0x81, 0x53,
    0x4E, 0x2D, 0x3E, 0x9A, 0x2F, 0xDF, 0x14, 0x19, 0xC6, 0x14, 0x64, 0x9B, 0x09, 0x6D, 0xBF, 0x53
};

static const unsigned char signature_asn1[] = {
    0x30, 0x45, 0x02, 0x20, 0x79, 0xd6, 0x39, 0xf4, 0x8e, 0x79, 0x25, 0xfe, 0xd0, 0x7b, 0xea, 0x63,
    0xdf, 0x6f, 0x80, 0xcc, 0x61, 0x19, 0xf4, 0xc0, 0xb9, 0x14, 0x0f, 0x02, 0x87, 0x91, 0x6f, 0x34,
    0xf3, 0xd7, 0x5c, 0xb8, 0x02, 0x21, 0x00, 0xce, 0x79, 0x93, 0x3f, 0xf4, 0x7b, 0x82, 0xea, 0xa0,
    0x5a, 0xd3, 0xa2, 0x87, 0xc7, 0x81, 0x53, 0x4e, 0x2d, 0x3e, 0x9a, 0x2f, 0xdf, 0x14, 0x19, 0xc6,
    0x14, 0x64, 0x9b, 0x09, 0x6d, 0xbf, 0x53
};

#endif /* _TEST_DATA_SM2DSA_H_ */
